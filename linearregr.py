# -*- coding: utf-8 -*-
"""LinearRegr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qgpZo65Z6ekEWWShF5m2P-NA3XtRoGkU
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
# %matplotlib inline

!wget -O FuelConsumption.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv

df = pd.read_csv("FuelConsumption.csv")
#look at head
df.head()

cdf = df[['ENGINESIZE', 'CYLINDERS', 'FUELCONSUMPTION_COMB', 'CO2EMISSIONS']]
cdf.head(9)

viz = cdf[['CYLINDERS', 'ENGINESIZE', 'CO2EMISSIONS', 'FUELCONSUMPTION_COMB']]
viz.hist()
plt.show()

plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS, color = 'blue')
plt.xlabel('FUELCONSUMPTION_COMB')
plt.ylabel('Emission')
plt.show()

plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,color = 'red')
plt.xlabel('ENGINESIZE')
plt.ylabel('Emissions')
plt.show()

plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS, color = 'black')
plt.xlabel('Cylinders')
plt.ylabel("Emissions")
plt.show()

msk = np.random.rand(len(df)) < 0.8
train  = cdf[msk]
test = cdf[~msk]

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS, color = 'blue')
plt.xlabel('ENGINE SIZE')
plt.ylabel('Emissions')
plt.show()

from sklearn import linear_model
regr = linear_model.LinearRegression()
train_x = np.asanyarray(train [['ENGINESIZE']])
train_y = np.asanyarray(train [['CO2EMISSIONS']])
regr.fit (train_x, train_y)

#coefficients
print ('Coefficients: ', regr.coef_)
print ('Intercept: ', regr.intercept_)

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS, color = 'blue')
plt.plot(train_x,regr.coef_[0][0] * train_x + regr.intercept_[0], color = 'red')
plt.xlabel('Engine size')
plt.ylabel('Emissions')
plt.show()

from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['ENGINESIZE']])
test_y = np.asanyarray(test[['CO2EMISSIONS']])
test_y_hat = regr.predict(test_x)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_hat - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_hat - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_hat , test_y) )